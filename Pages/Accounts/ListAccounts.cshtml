@page
@model MyApp.Namespace.IndexModel
@{
    ViewData["Title"] = "Accounts";
}

<div class="mx-auto p-4 sm:p-6 lg:p-8 glass-effect rounded-lg h-full overflow-y-auto">
    <!-- Existing KPI and Filter Sections -->
    <h2 class="text-4xl themed-heading font-extrabold mb-6 border-b-4 pb-2 inline-block">Accounts Management</h2>

    <!-- Account Summary KPIs -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <div class="data-card glass-effect rounded-xl p-6 border flex flex-col justify-between shadow-md">
            <h3 class="text-lg font-semibold text-primary mb-2">Total Accounts</h3>
            <p class="text-4xl font-bold text-blue-600 mt-auto">@Model.TotalAccounts</p>
            <span class="text-sm text-gray-500">Active: 110, Inactive: 10</span>
        </div>
        <div class="data-card glass-effect rounded-xl p-6 border flex flex-col justify-between shadow-md">
            <h3 class="text-lg font-semibold text-primary mb-2">Total Asset Accounts</h3>
            <p class="text-4xl font-bold text-green-600 mt-auto">@Model.TotalAssetAccounts</p>
            <span class="text-sm text-gray-500">Current Assets: 30</span>
        </div>
        <div class="data-card glass-effect rounded-xl p-6 border flex flex-col justify-between shadow-md">
            <h3 class="text-lg font-semibold text-primary mb-2">Total Liability Accounts</h3>
            <p class="text-4xl font-bold text-red-600 mt-auto">@Model.TotalLiabilityAccounts</p>
            <span class="text-sm text-gray-500">Long-term Liabilities: 15</span>
        </div>
    </div>

    <!-- Accounts List and Chart Section -->
    <div class="mb-8">
        <h3 class="text-2xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">All Accounts</h3>

        <!-- Filters and Options Section -->
        <div class="bg-gray-50 p-6 rounded-lg shadow-inner mb-6 glass-effect">
            <h4 class="text-xl font-semibold text-gray-800 mb-4">Filter & Organize Accounts</h4>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                <div>
                    <label for="accountTypeFilter" class="block text-gray-700 text-sm font-bold mb-2">Account Type</label>
                    <select id="accountTypeFilter" class="form-select w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <option value="">All Types</option>
                        <option value="Asset">Asset</option>
                        <option value="Liability">Liability</option>
                        <option value="Equity">Equity</option>
                        <option value="Revenue">Revenue</option>
                        <option value="Expense">Expense</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div>
                    <label for="companyFilter" class="block text-gray-700 text-sm font-bold mb-2">Company</label>
                    <select id="companyFilter" class="form-select w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <option value="">All Companies</option>
                        @foreach (var company in Model.Companies)
                        {
                            <option value="@company.CompanyId">@company.CompanyName</option>
                        }
                    </select>
                </div>
                <div>
                    <label for="balanceMin" class="block text-gray-700 text-sm font-bold mb-2">Min Balance</label>
                    <input type="number" id="balanceMin" placeholder="Min" class="form-input w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" />
                </div>
                <div>
                    <label for="balanceMax" class="block text-gray-700 text-sm font-bold mb-2">Max Balance</label>
                    <input type="number" id="balanceMax" placeholder="Max" class="form-input w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" />
                </div>
            </div>

            <div class="flex flex-wrap gap-4 items-center mt-4">
                <button id="applyFiltersBtn" class="btn-themed-secondary flex items-center px-4 py-2 rounded-md shadow-md hover:shadow-lg transition-all duration-200">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path></svg>
                    Apply Filters
                </button>
                <button id="clearFiltersBtn" class="btn-themed-secondary flex items-center px-4 py-2 rounded-md shadow-md hover:shadow-lg transition-all duration-200">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    Clear Filters
                </button>
                <div class="relative">
                    <label for="groupBy" class="sr-only">Group By</label>
                    <select id="groupBy" class="form-select w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <option value="">No Grouping</option>
                        <option value="accountType">Group by Account Type</option>
                        <option value="company">Group by Company</option>
                    </select>
                </div>
                <div class="relative">
                    <label for="savedViews" class="sr-only">Saved Views</label>
                    <select id="savedViews" class="form-select w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <option value="">Saved Views</option>
                        <option value="my-assets">My Asset Accounts</option>
                        <option value="high-balance">High Balance Accounts</option>
                    </select>
                </div>
                <button class="btn-themed flex items-center px-4 py-2 rounded-md shadow-md hover:shadow-lg transition-all duration-200">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"></path></svg>
                    Save View
                </button>
            </div>
        </div>

        <div class="mb-6 flex flex-wrap gap-4 items-center">
            <a asp-page="Create" class="flex items-center px-6 py-3 btn-themed font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-blue-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                Add New Account
            </a>
            <button id="toggleCardViewBtn_accountsTable" class="flex items-center px-6 py-3 btn-themed-secondary font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-green-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path></svg>
                Switch to Card View
            </button>
            <button id="toggleChartBtn_accountsTable" class="flex items-center px-6 py-3 btn-themed-secondary font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-green-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm12 0a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm-7 0a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10z"></path></svg>
                Show Chart
            </button>
            <button id="batchActionsBtn" class="flex items-center px-6 py-3 bg-purple-600 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-purple-300 hidden">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4"></path></svg>
                Batch Actions (<span id="selectedCount">0</span>)
            </button>
        </div>

        <div class="dataTables_wrapper">
            <table id="accountsTable" class="display w-full text-left border-collapse rounded-lg shadow-md" style="width:100%">
                <thead>
                    <tr>
                        <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider rounded-tl-xl">Account ID</th>
                        <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Account Name</th>
                        <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Account Type</th>
                        <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Current Balance</th>
                        <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Company</th>
                        <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider rounded-tr-xl">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @* DataTables will populate this tbody *@
                </tbody>
            </table>
        </div>
        <!--Container for Cards-->
        <div id="accountsTable-card-view" class="mt-8 cards-grid-container grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6" style="display: none;">
            <!-- Cards will be rendered here by JavaScript -->
        </div>

        <div id="accountsTable-chart-container" style="display: none; height:400px">
            <canvas id="accountsTable-chart"></canvas>
        </div>

        <!-- NEW: Forecasting Section -->
        <div class="mt-8 bg-gray-50 p-6 rounded-lg shadow-inner mb-6 glass-effect">
            <h3 class="text-2xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">Account Forecasting</h3>
            <p class="text-gray-700 mb-4">Select an account to view its historical balance and future forecast.</p>
            <div class="flex flex-wrap gap-4 items-center">
                <label for="forecastAccountId" class="block text-gray-700 text-sm font-bold">Select Account:</label>
                <select id="forecastAccountId" class="form-select rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50 w-auto">
                    <option value="">-- Select Account --</option>
                    @* Options will be populated by JavaScript from the accountsTable data *@
                </select>
                <button id="showForecastBtn" class="btn-themed flex items-center px-4 py-2 rounded-md shadow-md hover:shadow-lg transition-all duration-200">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path></svg>
                    Show Forecast
                </button>
            </div>
            <div id="forecastChartContainer" class="chart-container mt-6" style="display: none;">
                <canvas id="forecastChart"></canvas>
            </div>
            <div id="forecastLoading" class="text-center py-4 hidden">
                <div class="spinner-border text-blue-500 animate-spin h-8 w-8 border-4 border-t-4 border-blue-500 rounded-full" role="status"><span class="sr-only">Loading...</span></div>
                <p class="mt-2 text-gray-600">Generating forecast...</p>
            </div>
            <div id="forecastError" class="text-center py-4 text-red-500 hidden">
                <p>Error generating forecast. Please try again.</p>
            </div>
        </div>
    </div>

    <!-- Quick Links / Related Actions Section -->
    <div class="mb-8">
        <h3 class="text-2xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">Quick Actions & Reports</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <a href="/JournalEntries/Create" class="data-card glass-effect rounded-xl p-6 border hover:shadow-xl transition-shadow duration-300 flex items-center justify-center flex-col text-center">
                <svg class="w-16 h-16 text-blue-600 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
                <span class="text-xl font-semibold text-primary">Create Journal Entry</span>
            </a>
            <a href="/Reports/AccountBalances" class="data-card glass-effect rounded-xl p-6 border hover:shadow-xl transition-shadow duration-300 flex items-center justify-center flex-col text-center">
                <svg class="w-16 h-16 text-purple-600 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.592 1M12 8V3m0 9v3m0 0h3.25M12 15h-3.25m-3.655-2.83C4.12 10.45 3 8.358 3 6c0-1.657 1.343-3 3-3h12c1.657 0 3 1.343 3 3 0 2.358-1.12 4.45-2.345 5.17M12 15a3 3 0 100-6 3 3 0 000 6z"></path></svg>
                <span class="text-xl font-semibold text-primary">Account Balances Report</span>
            </a>
            <a href="/BankAccounts/Reconciliation" class="data-card glass-effect rounded-xl p-6 border hover:shadow-xl transition-shadow duration-300 flex items-center justify-center flex-col text-center">
                <svg class="w-16 h-16 text-orange-600 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path></svg>
                <span class="text-xl font-semibold text-primary">Bank Reconciliation</span>
            </a>
        </div>
    </div>
</div>

<!-- Generic Modal for Details, Edit, Delete (already present from previous turn) -->
<div id="genericCrudModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex items-center justify-center hidden">
    <div class="bg-white p-8 rounded-lg shadow-xl max-w-lg w-full" id="genericCrudModalContentWrapper">
        <!-- Content will be loaded here via AJAX -->
    </div>
</div>

<!-- Account Type Change Confirmation Modal (already present from previous turn) -->
<div id="accountTypeConfirmModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex items-center justify-center hidden">
    <div class="bg-white p-8 rounded-lg shadow-xl max-w-sm w-full">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Confirm Account Type Change</h3>
        <p class="text-gray-700 mb-6">Are you sure you want to change the Account Type? This is a significant financial classification.</p>
        <div class="flex justify-end space-x-4">
            <button type="button" id="cancelAccountTypeConfirmBtn" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors duration-200">Cancel</button>
            <button type="button" id="confirmAccountTypeChangeBtn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200">Yes, Change</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @* Ensure site.js is loaded ONLY ONCE, preferably in _Layout.cshtml *@
    <script src="~/js/site.js" asp-append-version="true"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    @Html.AntiForgeryToken() @* Include Anti-Forgery Token for AJAX POSTs *@
    <script>
        // Define the configuration for your Accounts DataTable ONLY ONCE here
        const accountsTableId = 'accountsTable'; // Define once for consistency
        const accountsTableConfig = {
            tableId: accountsTableId,
            ajaxUrl: '/api/Accounts', // Initial API endpoint to fetch account data
            ajaxMethod: 'GET',
            dataSrc: '', // Assuming your API returns an array directly
            serverSide: false, // Set to true if using server-side processing
            pageLength: 10,
            defaultOrder: [[0, 'asc']], // Order by the first column ascending
            initialIsCardView: false,
            initialIsChartView: false,
            columns: [
                { data: 'accountId', title: 'Account ID' },
                { data: 'accountName', title: 'Account Name' },
                { data: 'accountType', title: 'Account Type' },
                {
                    data: 'balance',
                    title: 'Balance',
                    render: function (data, type, row) {
                        return type === 'display' ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data) : data;
                    }
                },
                {
                    data: 'company',
                    title: 'Company',
                    render: function (data, type, row) {
                        return data ? data.companyName : 'N/A';
                    }
                },
                {
                    data: null,
                    title: 'Actions',
                    orderable: false,
                    searchable: false,
                    render: function (data, type, row) {
                        // IMPORTANT: Call openCrudModal with the correct modal ID and partial URL
                        return `
                            <button onclick="openCrudModal('genericCrudModal', '/Accounts/ListAccounts?handler=EditPartial&id=${row.accountId}')" class="text-indigo-600 hover:text-indigo-900 mr-3">Edit</button>
                            <button onclick="openCrudModal('genericCrudModal', '/Accounts/ListAccounts?handler=DetailsPartial&id=${row.accountId}')" class="text-blue-600 hover:text-blue-900 mr-3">Details</button>
                            <button onclick="openCrudModal('genericCrudModal', '/Accounts/ListAccounts?handler=DeletePartial&id=${row.accountId}')" class="text-red-600 hover:text-red-900">Delete</button>
                        `;
                    }
                }
            ],
            chartConfig: {
                type: 'pie', // Changed to pie for better visualization of account types
                processData: function (data) {
                    const accountTypeCounts = {};
                    data.forEach(account => {
                        accountTypeCounts[account.accountType] = (accountTypeCounts[account.accountType] || 0) + 1;
                    });

                    const labels = Object.keys(accountTypeCounts);
                    const counts = Object.values(accountTypeCounts);

                    const backgroundColors = [
                        'rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)',
                        'rgba(255, 206, 86, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)',
                        'rgba(199, 199, 199, 0.6)', 'rgba(83, 102, 255, 0.6)', 'rgba(201, 203, 207, 0.6)'
                    ];
                    const borderColors = [
                        'rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)',
                        'rgba(199, 199, 199, 1)', 'rgba(83, 102, 255, 1)', 'rgba(201, 203, 207, 1)'
                    ];

                    return {
                        labels: labels,
                        datasets: [{
                            label: 'Number of Accounts',
                            data: counts,
                            backgroundColor: labels.map((_, i) => backgroundColors[i % backgroundColors.length]),
                            borderColor: labels.map((_, i) => borderColors[i % borderColors.length]),
                            borderWidth: 1
                        }],
                        originalData: data.map(item => ({
                            accountId: item.accountId, // Ensure accountId is available for forecast dropdown
                            accountName: item.accountName,
                            accountType: item.accountType,
                            balance: item.balance
                        }))
                    };
                },
                options: {
                    title: {
                        display: true,
                        text: 'Distribution of Account Types'
                    },
                    scales: {} // Ensure scales are not present for pie chart
                }
            }
        };

        let forecastChart; // Declare chart instance globally or in a scope accessible by update function

        $(document).ready(function () {
            // Instantiate the Accounts table
            LoadDataTable(accountsTableConfig);

            // Populate the forecast account dropdown
            // This needs to happen after the DataTable has loaded its data
            const accountsTableInstance = dataTableManager[accountsTableId].table;
            if (accountsTableInstance) {
                // Listen for DataTables init and draw events to populate the dropdown
                accountsTableInstance.on('init.dt draw.dt', function () {
                    const $forecastSelect = $('#forecastAccountId');
                    $forecastSelect.empty().append('<option value="">-- Select Account --</option>');
                    accountsTableInstance.rows().data().toArray().forEach(account => {
                        $forecastSelect.append(`<option value="${account.accountId}">${account.accountName} (ID: ${account.accountId})</option>`);
                    });
                });
            }


            // Event listener for the table/card toggle button
            $(`#toggleCardViewBtn_${accountsTableId}`).on('click', function () {
                toggleTableView(accountsTableId);
                const $btn = $(this);
                const instanceState = dataTableManager[accountsTableId];
                if (instanceState.isCardView) {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>Switch to Table View');
                } else {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path></svg>Switch to Card View');
                }
            });

            // Event listener for the chart toggle button
            $(`#toggleChartBtn_${accountsTableId}`).on('click', function () {
                toggleChartView(accountsTableId);
                const $btn = $(this);
                const instanceState = dataTableManager[accountsTableId];
                if (instanceState.isChartView) {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm12 0V7m0 10a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm-6 0V7m0 10a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10z"></path></svg>Show Table/Card');
                } else {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3m0 0l3 3m-3-3v8m0-13a9 9 0 110 18 9 9 0 010-18z"></path></svg>Show Chart');
                }
            });

            // Event listener for the "Apply Filters" button
            $('#applyFiltersBtn').on('click', function () {
                const accountType = $('#accountTypeFilter').val();
                const companyId = $('#companyFilter').val();
                const minBalance = $('#balanceMin').val();
                const maxBalance = $('#balanceMax').val();

                let queryParams = {};
                if (accountType) queryParams.accountType = accountType;
                if (companyId) queryParams.companyId = companyId;
                if (minBalance) queryParams.minBalance = minBalance;
                if (maxBalance) queryParams.maxBalance = maxBalance;

                const queryString = $.param(queryParams);
                // Use the new filter endpoint
                const newAjaxUrl = `/api/Accounts/filter${queryString ? '?' + queryString : ''}`;

                const table = dataTableManager[accountsTableId].table;
                table.ajax.url(newAjaxUrl).load(); // Reload DataTable with new URL
            });

            // Clear Filters button
            $('#clearFiltersBtn').on('click', function () {
                // Reset all filter inputs
                $('#accountTypeFilter').val('');
                $('#companyFilter').val('');
                $('#balanceMin').val('');
                $('#balanceMax').val('');

                // Reload DataTable with the original, unfiltered endpoint
                const table = dataTableManager[accountsTableId].table;
                table.ajax.url('/api/Accounts').load(); // Load from the default endpoint
            });

            // Client-side grouping logic for DataTables
            // This assumes data is fetched without server-side grouping and
            // DataTables' rowGroup extension or custom rendering is used.
            $('#groupBy').on('change', function () {
                const groupByColumn = $(this).val();
                const table = dataTableManager[accountsTableId].table;

                // Clear any existing grouping
                // Note: DataTables RowGroup extension is needed for proper grouping functionality.
                // Without it, this will just sort by the column.
                table.order([]); // Clear current sorting
                table.draw(); // Redraw to remove previous grouping effects

                if (groupByColumn === 'accountType') {
                    alert('Grouping by Account Type selected. (Requires DataTables RowGroup extension for full functionality)');
                    // If DataTables RowGroup extension is available, uncomment and configure:
                    // table.rowGroup().dataSrc('accountType').enable().draw();
                } else if (groupByColumn === 'company') {
                    alert('Grouping by Company selected. (Requires DataTables RowGroup extension for full functionality)');
                    // If DataTables RowGroup extension is available, uncomment and configure:
                    // table.rowGroup().dataSrc('company.companyName').enable().draw(); // Assuming companyName is the display field
                } else {
                    // If no grouping, disable rowGroup if it was enabled
                    // if (table.rowGroup()) { table.rowGroup().disable().draw(); }
                }
            });

            // Saved Views functionality (placeholder)
            $('#savedViews').on('change', function () {
                const savedView = $(this).val();
                // Reset filters first
                $('#accountTypeFilter').val('');
                $('#companyFilter').val('');
                $('#balanceMin').val('');
                $('#balanceMax').val('');

                if (savedView === 'my-assets') {
                    $('#accountTypeFilter').val('Asset');
                } else if (savedView === 'high-balance') {
                    $('#balanceMin').val('10000'); // Example: Accounts with balance >= 10,000
                }
                // Trigger the apply filters button to apply the selected view's filters
                $('#applyFiltersBtn').click();
            });

            // --- Account Forecasting Logic ---
            $('#showForecastBtn').on('click', function () {
                const accountId = $('#forecastAccountId').val();
                if (!accountId) {
                    // Use a custom message box instead of alert
                    showCustomMessage("Please select an account to generate a forecast.", "Warning");
                    return;
                }

                $('#forecastLoading').removeClass('hidden');
                $('#forecastError').addClass('hidden');
                $('#forecastChartContainer').addClass('hidden');

                $.ajax({
                    url: `/api/Accounts/${accountId}/forecast`,
                    method: 'GET',
                    success: function (data) {
                        $('#forecastLoading').addClass('hidden');
                        $('#forecastChartContainer').removeClass('hidden');
                        renderForecastChart(data);
                    },
                    error: function (xhr, status, error) {
                        $('#forecastLoading').addClass('hidden');
                        $('#forecastError').removeClass('hidden');
                        console.error("Error fetching forecast:", error);
                        showCustomMessage("Failed to load forecast data. Please ensure the account has sufficient historical data and the forecasting service is running correctly.", "Error");
                    }
                });
            });

            function renderForecastChart(data) {
                const ctx = document.getElementById('forecastChart').getContext('2d');

                // Destroy existing chart if it exists
                if (forecastChart) {
                    forecastChart.destroy();
                }

                const labels = data.map(item => item.date);
                const balances = data.map(item => item.balance);
                const lowerBounds = data.map(item => item.lowerBound);
                const upperBounds = data.map(item => item.upperBound);

                // Determine the split point between historical and forecasted data
                // Assuming historical data comes first, then forecasted data
                const firstForecastIndex = data.findIndex(item => item.lowerBound !== undefined && item.lowerBound !== null);

                const datasets = [
                    {
                        label: 'Historical Balance',
                        data: firstForecastIndex !== -1 ? balances.slice(0, firstForecastIndex) : balances,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.1,
                        pointRadius: 3,
                        pointBackgroundColor: 'rgb(75, 192, 192)'
                    }
                ];

                if (firstForecastIndex !== -1) {
                    // Add forecasted data
                    datasets.push({
                        label: 'Forecasted Balance',
                        data: balances.slice(firstForecastIndex),
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderWidth: 2,
                        borderDash: [5, 5], // Dashed line for forecast
                        fill: false,
                        tension: 0.1,
                        pointRadius: 3,
                        pointBackgroundColor: 'rgb(255, 99, 132)'
                    });

                    // Add confidence interval (if available)
                    if (lowerBounds.some(val => val !== null) && upperBounds.some(val => val !== null)) {
                        datasets.push({
                            label: 'Lower Bound',
                            data: lowerBounds.slice(firstForecastIndex),
                            borderColor: 'rgba(153, 102, 255, 0.5)',
                            backgroundColor: 'rgba(153, 102, 255, 0.1)',
                            borderWidth: 1,
                            fill: '-1', // Fill to the previous dataset (Forecasted Balance)
                            tension: 0.1,
                            pointRadius: 0,
                            hidden: true // Hide by default, user can toggle
                        });
                        datasets.push({
                            label: 'Upper Bound',
                            data: upperBounds.slice(firstForecastIndex),
                            borderColor: 'rgba(255, 159, 64, 0.5)',
                            backgroundColor: 'rgba(255, 159, 64, 0.1)',
                            borderWidth: 1,
                            fill: '1', // Fill to the next dataset (Lower Bound)
                            tension: 0.1,
                            pointRadius: 0,
                            hidden: true // Hide by default, user can toggle
                        });
                    }
                }

                forecastChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: datasets
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Account Balance Forecast'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                                        }
                                        return label;
                                    }
                                }
                            }
                        },
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    unit: 'month',
                                    tooltipFormat: 'MMM yyyy',
                                    displayFormats: {
                                        month: 'MMM yyyy'
                                    }
                                },
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Balance'
                                },
                                beginAtZero: false,
                                ticks: {
                                    callback: function (value, index, values) {
                                        return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);
                                    }
                                }
                            }
                        }
                    }
                });
            }


            // --- Generic Modal Functions (from your existing code, ensuring they are here) ---
            window.openCrudModal = function (modalId, url) {
                const $modal = $(`#${modalId}`);
                const $modalContentWrapper = $(`#${modalId}ContentWrapper`);

                $modalContentWrapper.empty(); // Clear previous content
                $modal.removeClass('hidden').addClass('flex'); // Show modal
                $('body').addClass('overflow-hidden'); // Prevent scrolling body

                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (data) {
                        $modalContentWrapper.html(data);
                        // Re-parse validation scripts for the new content if any forms are loaded
                        $.validator.unobtrusive.parse($modalContentWrapper);

                        // Attach form submission handlers for the loaded content
                        attachFormHandlers($modalId);
                    },
                    error: function (xhr, status, error) {
                        $modalContentWrapper.html('<p class="text-red-500">Error loading content: ' + xhr.responseText + '</p>');
                        console.error("AJAX Error:", status, error, xhr.responseText);
                    }
                });
            };

            window.hideModal = function (modalId) {
                $(`#${modalId}`).removeClass('flex').addClass('hidden');
                $('body').removeClass('overflow-hidden');
                // Optionally clear modal content when hidden to prevent stale data
                $(`#${modalId}ContentWrapper`).empty();
            };

            function attachFormHandlers(modalId) {
                // Handle form submission within the modal
                $(`#${modalId}ContentWrapper form`).off('submit').on('submit', function (e) {
                    e.preventDefault(); // Prevent default form submission
                    const $form = $(this);

                    // Basic client-side validation check
                    if (!$form.valid()) {
                        return; // Stop if validation fails
                    }

                    const url = $form.attr('action') || window.location.pathname; // Use form action or current page
                    const method = $form.attr('method') || 'POST';
                    const formData = $form.serialize();
                    const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

                    $.ajax({
                        url: url,
                        type: method,
                        data: formData + '&__RequestVerificationToken=' + encodeURIComponent(antiForgeryToken), // Include token
                        headers: {
                            'RequestVerificationToken': antiForgeryToken // For API controllers
                        },
                        success: function (response) {
                            handleAjaxSuccess(response, modalId);
                        },
                        error: function (xhr, status, error) {
                            handleAjaxError(xhr, status, error, modalId);
                        }
                    });
                });

                // Handle data-dismiss="modal" for buttons inside loaded content
                $(`#${modalId}ContentWrapper [data-dismiss="modal"]`).off('click').on('click', function () {
                    hideModal(modalId);
                });
            }

            function handleAjaxSuccess(response, modalId) {
                if (response.success) {
                    hideModal(modalId);
                    // Reload the DataTable to show updated data
                    dataTableManager[accountsTableId].table.ajax.reload(null, false); // 'null' keeps current paging, 'false' resets ordering
                    showCustomMessage("Operation completed successfully!", "Success");
                } else {
                    // If the server returns success: false, but not an error status
                    showCustomMessage(response.message || "An unknown error occurred.", "Error");
                }
            }

            function handleAjaxError(xhr, status, error, modalId) {
                let errorMessage = "An unexpected error occurred.";
                if (xhr.responseJSON && xhr.responseJSON.title) {
                    errorMessage = xhr.responseJSON.title; // For typical ASP.NET Core API errors
                } else if (xhr.responseText) {
                    errorMessage = xhr.responseText; // Fallback for plain text errors
                }
                showCustomMessage("Error: " + errorMessage, "Error");
                console.error("AJAX Error:", status, error, xhr.responseText);
                // Optionally, if the modal content is a form with validation errors,
                // you might want to re-render the form with errors here.
                // For now, we'll just show a message.
            }

            // Custom message box function (instead of alert)
            function showCustomMessage(message, type = "Info") {
                const messageBox = $('#customMessageBox');
                if (messageBox.length === 0) {
                    // Create if it doesn't exist
                    $('body').append(`
                        <div id="customMessageBox" class="fixed bottom-4 right-4 p-4 rounded-lg shadow-lg text-white z-[1000] hidden">
                            <p id="customMessageText"></p>
                        </div>
                    `);
                    messageBox = $('#customMessageBox');
                }

                const messageText = $('#customMessageText');
                messageText.text(message);

                messageBox.removeClass('hidden bg-green-500 bg-red-500 bg-blue-500');
                if (type === "Success") {
                    messageBox.addClass('bg-green-500');
                } else if (type === "Error") {
                    messageBox.addClass('bg-red-500');
                } else {
                    messageBox.addClass('bg-blue-500');
                }
                messageBox.fadeIn().delay(3000).fadeOut(); // Fade in, show for 3s, then fade out
            }

            // Global event listeners for modals (close on escape, close on outside click)
            $(document).on('keydown', function(e) {
                if (e.key === 'Escape') {
                    hideModal('genericCrudModal');
                    hideModal('accountTypeConfirmModal');
                }
            });

            $('#genericCrudModal').on('click', function(e) {
                if ($(e.target).is(this)) {
                    hideModal('genericCrudModal');
                }
            });

            $('#accountTypeConfirmModal').on('click', function(e) {
                if ($(e.target).is(this)) {
                    hideModal('accountTypeConfirmModal');
                }
            });

            // Re-attach the global account type confirmation buttons to the main page script.
            // These handlers will now correctly target the global confirmation modal.
            $('#confirmAccountTypeChangeBtn').off('click').on('click', function () {
                $('#accountTypeConfirmModal').removeClass('flex').addClass('hidden');
                $('body').removeClass('overflow-hidden');
                // This will re-focus the select inside the loaded partial, allowing the user to make a choice.
                // Note: The specific ID 'editAccountType' will only exist if the edit partial is loaded.
                // This might require a slight delay or a more robust way to target the element.
                // For now, if the edit modal is open, we assume the select is there.
                $('#editAccountForm select[name="AccountType"]').focus();
            });

            $('#cancelAccountTypeConfirmBtn').off('click').on('click', function () {
                $('#accountTypeConfirmModal').removeClass('flex').addClass('hidden');
                $('body').removeClass('overflow-hidden');
                // Revert the value of the select in the edit modal if it's currently open
                // This assumes `originalAccountTypeValue` was captured before the modal was shown.
                // This part is tricky because the modal content is loaded dynamically.
                // A more robust solution involves passing the original value to the modal script.
                // For now, we'll just close the modal.
            });
        });
    </script>
}
@page
@model MyApp.Namespace.ListEquipmentModel
@{
    ViewData["Title"] = "Equipment Management";
}

<div class="mx-auto p-4 sm:p-6 lg:p-8 glass-effect rounded-lg h-full overflow-y-auto">
    <h2 class="text-4xl themed-heading font-extrabold mb-6 border-b-4 pb-2 inline-block">Equipment Management Dashboard</h2>

    <!-- Equipment Summary KPIs -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="data-card glass-effect rounded-xl p-6 border flex flex-col justify-between shadow-md">
            <h3 class="text-lg font-semibold text-primary mb-2">Total Equipment Items</h3>
            <p class="text-4xl font-bold text-blue-600 mt-auto" id="kpiTotalEquipment">0</p>
            <span class="text-sm text-gray-500">All registered assets</span>
        </div>
        <div class="data-card glass-effect rounded-xl p-6 border flex flex-col justify-between shadow-md">
            <h3 class="text-lg font-semibold text-primary mb-2">Equipment In Service</h3>
            <p class="text-4xl font-bold text-green-600 mt-auto" id="kpiInServiceEquipment">0</p>
            <span class="text-sm text-gray-500">Currently operational</span>
        </div>
        <div class="data-card glass-effect rounded-xl p-6 border flex flex-col justify-between shadow-md">
            <h3 class="text-lg font-semibold text-primary mb-2">Total Purchase Cost</h3>
            <p class="text-4xl font-bold text-purple-600 mt-auto" id="kpiTotalPurchaseCost">$0.00</p>
            <span class="text-sm text-gray-500">Cumulative acquisition value</span>
        </div>
        <div class="data-card glass-effect rounded-xl p-6 border flex flex-col justify-between shadow-md">
            <h3 class="text-lg font-semibold text-primary mb-2">Equipment Under Maintenance</h3>
            <p class="text-4xl font-bold text-orange-600 mt-auto" id="kpiUnderMaintenance">0</p>
            <span class="text-sm text-gray-500">Currently undergoing service</span>
        </div>
    </div>

    <!-- Filter and Action Buttons -->
    <div class="mb-8 p-6 glass-effect rounded-xl border shadow-md">
        <h3 class="text-xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">Filter Equipment Records</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div>
                <label for="equipmentStatusFilter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Status</label>
                <select id="equipmentStatusFilter" class="form-select w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                    <option value="">All Statuses</option>
                    <option value="In Service">In Service</option>
                    <option value="Under Maintenance">Under Maintenance</option>
                    <option value="Retired">Retired</option>
                    <option value="Disposed">Disposed</option>
                </select>
            </div>
            <div>
                <label for="equipmentLocationFilter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Location</label>
                <input type="text" id="equipmentLocationFilter" placeholder="Search by location..." class="form-control w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
            </div>
            <div>
                <label for="equipmentNameFilter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Equipment Name</label>
                <input type="text" id="equipmentNameFilter" placeholder="Search by name..." class="form-control w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
            </div>
            <div>
                <label for="purchaseDateFilter" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Purchase Year</label>
                <input type="number" id="purchaseDateFilter" placeholder="e.g., 2023" min="1900" max="2100" class="form-control w-full rounded-md shadow-sm border-gray-300 focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
            </div>
        </div>
        <div class="flex flex-wrap gap-4 items-center">
            <a href="/Equipment/Create" class="flex items-center px-6 py-3 btn-themed font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-blue-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                Add New Equipment
            </a>
            <button class="flex items-center px-6 py-3 btn-themed-secondary font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-purple-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                Schedule Maintenance
            </button>
            <button class="flex items-center px-6 py-3 btn-themed-secondary font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-yellow-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 2v-6m2 8H7m6 1a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                View Maintenance History
            </button>
            <button id="toggleViewBtn_equipmentTable" class="flex items-center px-6 py-3 btn-themed-secondary font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-green-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path></svg>
                Switch to Card View
            </button>
            <button id="toggleChartBtn_equipmentTable" class="flex items-center px-6 py-3 btn-themed-secondary font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-green-300">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm12 0a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm-7 0a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10z"></path></svg>
                Show Chart
            </button>
        </div>
    </div>

    <!-- Equipment Table Container -->
    <div class="mb-8">
        <h3 class="text-2xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">All Equipment Records</h3>
        <table id="equipmentTable" class="display w-full text-left border-collapse rounded-lg shadow-md" style="width:100%">
            <thead>
                <tr>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider rounded-tl-xl">Equipment ID</th>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Name</th>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Serial Number</th>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Purchase Date</th>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Cost</th>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Location</th>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider">Status</th>
                    <th class="px-4 py-3 border-b-2 border-gray-200 text-left text-xs font-semibold uppercase tracking-wider rounded-tr-xl">Actions</th>
                </tr>
            </thead>
            <tbody>
                @* DataTables will populate this tbody *@
            </tbody>
        </table>

        <div id="equipmentTable-card-view" class="mt-8 cards-grid-container grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6" style="display: none;"></div>
        <div id="equipmentTable-chart-container" style="display: none;">
            <canvas id="equipmentTable-chart"></canvas>
        </div>
    </div>

    <!-- Equipment Charts Section -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div class="data-card glass-effect rounded-xl p-6 border shadow-md">
            <h3 class="text-xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">Equipment Status Distribution</h3>
            <div style="height: 300px;"> 
                <canvas id="equipmentStatusChart"></canvas>
            </div>
        </div>
        <div class="data-card glass-effect rounded-xl p-6 border shadow-md">
            <h3 class="text-xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">Equipment Cost by Status</h3>
            <div style="height: 300px;"> 
                <canvas id="equipmentCostByStatusChart"></canvas>
            </div>
        </div>
    </div>

    <div class="data-card glass-effect rounded-xl p-6 border shadow-md mb-8">
        <h3 class="text-xl font-bold themed-heading mb-4 border-b-2 pb-2 inline-block">Equipment by Location</h3>
        <div style="height: 350px;">
            <canvas id="equipmentByLocationChart"></canvas>
        </div>
    </div>

</div>

<!-- Equipment Details Modal -->
<div id="equipmentDetailsModal" class="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-xl w-11/12 md:w-1/2 lg:w-1/3 flex flex-col p-6 glass-effect border">
        <div class="flex justify-between items-center pb-4 border-b border-gray-200 mb-4">
            <h3 id="equipmentModalTitle" class="text-2xl font-bold text-primary">Equipment Details</h3>
            <button id="closeEquipmentDetailsModalBtn" class="text-gray-500 hover:text-gray-700 focus:outline-none">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            </button>
        </div>
        <div id="equipmentDetailsContent" class="text-gray-700 space-y-3 overflow-y-auto max-h-[70vh]">
            <p><strong>Equipment ID:</strong> <span id="modalEquipmentId"></span></p>
            <p><strong>Name:</strong> <span id="modalEquipmentName"></span></p>
            <p><strong>Serial Number:</strong> <span id="modalSerialNumber"></span></p>
            <p><strong>Purchase Date:</strong> <span id="modalPurchaseDate"></span></p>
            <p><strong>Purchase Cost:</strong> <span id="modalPurchaseCost"></span></p>
            <p><strong>Current Location:</strong> <span id="modalCurrentLocation"></span></p>
            <p><strong>Status:</strong> <span id="modalStatus"></span></p>
            <p><strong>Company ID:</strong> <span id="modalCompanyId"></span></p>
            <p class="text-sm text-gray-500 mt-4">Further details like maintenance history, usage logs, and depreciation schedules can be integrated here.</p>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        // Function to open the equipment details modal
        function openEquipmentDetailsModal(equipment) {
            const modal = document.getElementById('equipmentDetailsModal');
            document.getElementById('modalEquipmentId').textContent = equipment.equipmentId;
            document.getElementById('modalEquipmentName').textContent = equipment.equipmentName;
            document.getElementById('modalSerialNumber').textContent = equipment.serialNumber || 'N/A';
            document.getElementById('modalPurchaseDate').textContent = equipment.purchaseDate ? new Date(equipment.purchaseDate).toLocaleDateString() : 'N/A';
            document.getElementById('modalPurchaseCost').textContent = equipment.purchaseCost ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(equipment.purchaseCost) : 'N/A';
            document.getElementById('modalCurrentLocation').textContent = equipment.currentLocation || 'N/A';
            document.getElementById('modalStatus').textContent = equipment.status || 'N/A';
            document.getElementById('modalCompanyId').textContent = equipment.companyId || 'N/A';
            document.getElementById('equipmentModalTitle').textContent = `Details: ${equipment.equipmentName}`;
            modal.classList.remove('hidden'); // Show the modal
        }

        // Function to close the equipment details modal
        function closeEquipmentDetailsModal() {
            document.getElementById('equipmentDetailsModal').classList.add('hidden'); // Hide the modal
        }

        $(document).ready(function () {
            const equipmentTableId = "equipmentTable";

            // Function to update KPIs
            function updateEquipmentKPIs(data) {
                const totalEquipment = data.length;
                const inServiceEquipment = data.filter(item => item.status === 'In Service').length;
                const totalPurchaseCost = data.reduce((sum, item) => sum + (item.purchaseCost || 0), 0);
                const underMaintenance = data.filter(item => item.status === 'Under Maintenance').length;

                $('#kpiTotalEquipment').text(totalEquipment);
                $('#kpiInServiceEquipment').text(inServiceEquipment);
                $('#kpiTotalPurchaseCost').text(new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(totalPurchaseCost));
                $('#kpiUnderMaintenance').text(underMaintenance);
            }

            // Define the DataTables configuration for Equipment
            const equipmentTableConfig = {
                tableId: equipmentTableId,
                ajaxUrl: "/api/Equipment", // Assuming an API endpoint for Equipment
                columns: [
                    { data: "equipmentId", title: "Equipment ID" },
                    { data: "equipmentName", title: "Name" },
                    { data: "serialNumber", title: "Serial Number" },
                    { data: "purchaseDate", title: "Purchase Date", render: function (data) { return data ? new Date(data).toLocaleDateString() : ""; } },
                    { data: "purchaseCost", title: "Cost", render: $.fn.dataTable.render.number(',', '.', 2, '$') },
                    { data: "currentLocation", title: "Location" },
                    { data: "status", title: "Status" },
                    {
                        data: null,
                        title: "Actions",
                        orderable: false,
                        searchable: false,
                        render: function (data, type, row) {
                            return `
                                <button class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 mr-2" onclick="openEquipmentDetailsModal(${JSON.stringify(row).replace(/"/g, '&quot;')})">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
                                    View
                                </button>
                                <a href="/Equipment/Edit/${row.equipmentId}" class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-yellow-700 bg-yellow-100 hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors duration-200 mr-2">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                    Edit
                                </a>
                                <button class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200" onclick="if(confirm('Are you sure you want to delete this Equipment?')) { /* Implement actual delete logic via AJAX */ alert('Delete functionality not implemented yet.'); }">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                    Delete
                                </button>
                            `;
                        }
                    }
                ],
                pageLength: 10,
                initialIsCardView: false,
                initialIsChartView: false,
                cardViewRender: function (data) {
                    return `
                        <div class="data-card glass-effect rounded-xl p-6 border hover:shadow-xl transition-shadow duration-300">
                            <h3 class="text-xl font-bold text-primary mb-2">${data.equipmentName} (${data.equipmentId})</h3>
                            <div class="card-item"><strong>Serial No.:</strong> <span>${data.serialNumber || 'N/A'}</span></div>
                            <div class="card-item"><strong>Purchase Date:</strong> <span>${data.purchaseDate ? new Date(data.purchaseDate).toLocaleDateString() : 'N/A'}</span></div>
                            <div class="card-item"><strong>Cost:</strong> <span>${$.fn.dataTable.render.number(',', '.', 2, '$').display(data.purchaseCost)}</span></div>
                            <div class="card-item"><strong>Location:</strong> <span>${data.currentLocation || 'N/A'}</span></div>
                            <div class="card-item"><strong>Status:</strong> <span>${data.status || 'N/A'}</span></div>
                            <div class="card-actions mt-4">
                                <button class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 mr-2" onclick="openEquipmentDetailsModal(${JSON.stringify(data).replace(/"/g, '&quot;')})">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg> View
                                </button>
                                <a href="/Equipment/Edit/${data.equipmentId}" class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-yellow-700 bg-yellow-100 hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors duration-200 mr-2">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg> Edit
                                </a>
                                <button class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200" onclick="if(confirm('Are you sure you want to delete this Equipment?')) { /* Implement actual delete logic via AJAX */ alert('Delete functionality not implemented yet.'); }">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg> Delete
                                </button>
                            </div>
                        </div>
                    `;
                },
                chartConfig: {
                    type: 'doughnut', // Chart for Equipment Status Distribution
                    processData: function (apiData) {
                        const statusCounts = {};
                        apiData.forEach(item => {
                            const status = item.status || 'Unknown';
                            statusCounts[status] = (statusCounts[status] || 0) + 1;
                        });

                        const labels = Object.keys(statusCounts);
                        const dataValues = labels.map(label => statusCounts[label]);

                        return {
                            labels: labels,
                            datasets: [{
                                label: 'Equipment Status',
                                data: dataValues,
                                backgroundColor: [
                                    'rgba(75, 192, 192, 0.6)', // Green for In Service
                                    'rgba(255, 159, 64, 0.6)',  // Orange for Under Maintenance
                                    'rgba(255, 99, 132, 0.6)',  // Red for Retired
                                    'rgba(201, 203, 207, 0.6)'  // Gray for Disposed/Unknown
                                ],
                                borderColor: [
                                    'rgba(75, 192, 192, 1)',
                                    'rgba(255, 159, 64, 1)',
                                    'rgba(255, 99, 132, 1)',
                                    'rgba(201, 203, 207, 1)'
                                ],
                                borderWidth: 1
                            }]
                        };
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Equipment Status Distribution',
                                color: 'var(--text-primary)'
                            },
                            legend: {
                                position: 'right',
                                labels: {
                                    color: 'var(--text-primary)'
                                }
                            }
                        }
                    }
                }
            };

            // Initialize the DataTable for equipment
            LoadDataTable(equipmentTableConfig);

            // Additional Charts (not directly tied to the main DataTable toggle, but use its data)
            // Equipment Status Distribution Chart (already part of equipmentTableConfig.chartConfig)
            // We'll create separate configs for other charts
            const equipmentStatusChartConfig = {
                chartId: "equipmentStatusChart",
                type: 'doughnut',
                ajaxUrl: "/api/Equipment", // Re-use the same API for data
                processData: equipmentTableConfig.chartConfig.processData, // Use the same processData function
                options: equipmentTableConfig.chartConfig.options
            };
            initializeChart(equipmentStatusChartConfig.chartId, equipmentStatusChartConfig);


            // Equipment Cost by Status Chart
            const equipmentCostByStatusChartConfig = {
                chartId: "equipmentCostByStatusChart",
                type: 'bar',
                ajaxUrl: "/api/Equipment",
                processData: function (apiData) {
                    const statusCosts = {};
                    apiData.forEach(item => {
                        const status = item.status || 'Unknown';
                        statusCosts[status] = (statusCosts[status] || 0) + (item.purchaseCost || 0);
                    });

                    const labels = Object.keys(statusCosts);
                    const dataValues = labels.map(label => statusCosts[label]);

                    return {
                        labels: labels,
                        datasets: [{
                            label: 'Total Purchase Cost',
                            data: dataValues,
                            backgroundColor: [
                                'rgba(75, 192, 192, 0.6)',
                                'rgba(255, 159, 64, 0.6)',
                                'rgba(255, 99, 132, 0.6)',
                                'rgba(201, 203, 207, 0.6)'
                            ],
                            borderColor: [
                                'rgba(75, 192, 192, 1)',
                                'rgba(255, 159, 64, 1)',
                                'rgba(255, 99, 132, 1)',
                                'rgba(201, 203, 207, 1)'
                            ],
                            borderWidth: 1
                        }]
                    };
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Equipment Cost by Status',
                            color: 'var(--text-primary)'
                        },
                        legend: {
                            labels: {
                                color: 'var(--text-primary)'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: 'var(--text-secondary)' },
                            grid: { color: 'var(--border-color)' }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: 'var(--text-secondary)',
                                callback: function(value) {
                                    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(value);
                                }
                            },
                            grid: { color: 'var(--border-color)' }
                        }
                    }
                }
            };
            initializeChart(equipmentCostByStatusChartConfig.chartId, equipmentCostByStatusChartConfig);

            // Equipment by Location Chart
            const equipmentByLocationChartConfig = {
                chartId: "equipmentByLocationChart",
                type: 'bar',
                ajaxUrl: "/api/Equipment",
                processData: function (apiData) {
                    const locationCounts = {};
                    apiData.forEach(item => {
                        const location = item.currentLocation || 'Unknown';
                        locationCounts[location] = (locationCounts[location] || 0) + 1;
                    });

                    const labels = Object.keys(locationCounts);
                    const dataValues = labels.map(label => locationCounts[label]);

                    return {
                        labels: labels,
                        datasets: [{
                            label: 'Number of Equipment Items',
                            data: dataValues,
                            backgroundColor: [
                                'rgba(54, 162, 235, 0.6)',
                                'rgba(75, 192, 192, 0.6)',
                                'rgba(153, 102, 255, 0.6)',
                                'rgba(255, 206, 86, 0.6)',
                                'rgba(255, 99, 132, 0.6)'
                            ],
                            borderColor: [
                                'rgba(54, 162, 235, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(255, 99, 132, 1)'
                            ],
                            borderWidth: 1
                        }]
                    };
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Equipment Distribution by Location',
                            color: 'var(--text-primary)'
                        },
                        legend: {
                            labels: {
                                color: 'var(--text-primary)'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: 'var(--text-secondary)' },
                            grid: { color: 'var(--border-color)' }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: { color: 'var(--text-secondary)' },
                            grid: { color: 'var(--border-color)' }
                        }
                    }
                }
            };
            initializeChart(equipmentByLocationChartConfig.chartId, equipmentByLocationChartConfig);


            // KPI Update Logic (after data is loaded for the main table)
            // This assumes the LoadDataTable function's success callback is where you can get the full data.
            // A more robust solution would involve a dedicated KPI API endpoint or a separate data fetch.
            // For now, we'll simulate this by calling a function that would typically be called after data is available.
            // This is a placeholder and would need actual integration with the DataTable's ajax success or a separate fetch.
            $.ajax({
                url: "/api/Equipment",
                method: "GET",
                dataType: "json",
                success: function (data) {
                    updateEquipmentKPIs(data);

                    // Apply filters to DataTables
                    const dataTable = dataTableManager[equipmentTableId].dataTableInstance;

                    $('#equipmentStatusFilter, #equipmentLocationFilter, #equipmentNameFilter, #purchaseDateFilter').on('change keyup', function () {
                        const status = $('#equipmentStatusFilter').val();
                        const location = $('#equipmentLocationFilter').val().toLowerCase();
                        const name = $('#equipmentNameFilter').val().toLowerCase();
                        const purchaseYear = $('#purchaseDateFilter').val();

                        dataTable.columns(6).search(status).draw(); // Filter by Status column
                        dataTable.columns(5).search(location).draw(); // Filter by Location column
                        dataTable.columns(1).search(name).draw(); // Filter by Equipment Name column

                        // Custom filter for Purchase Year
                        $.fn.dataTable.ext.search.push(
                            function (settings, searchData, index, rowData, counter) {
                                if (settings.sTableId !== equipmentTableId) {
                                    return true; // Apply this filter only to the correct table
                                }

                                const rowPurchaseDate = rowData.purchaseDate; // Assuming 'purchaseDate' is the field name
                                if (purchaseYear === "" || !rowPurchaseDate) {
                                    return true; // No filter applied or no date available
                                }

                                const rowYear = new Date(rowPurchaseDate).getFullYear().toString();
                                return rowYear === purchaseYear;
                            }
                        );
                        dataTable.draw();
                        $.fn.dataTable.ext.search.pop(); // Remove the custom filter after drawing
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching data for KPIs:", status, error);
                }
            });


            // Attach event listener to close button of the modal
            document.getElementById('closeEquipmentDetailsModalBtn').addEventListener('click', closeEquipmentDetailsModal);
        });
    </script>
}

@page
@model MyApp.Namespace.ListPaymentsModel
@{
    ViewData["Title"] = "Payments";
}

<div class="container mx-auto p-4 sm:p-6 lg:p-8 bg-gray-50 rounded-lg shadow-inner">
    <h2 class="text-4xl font-extrabold text-gray-800 mb-6 border-b-4 border-blue-600 pb-2 inline-block">Payments Overview</h2>

    <div class="mb-6 flex flex-wrap gap-4 items-center">
        <button id="toggleViewBtn_paymentsTable" class="flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-800 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-blue-300">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path></svg>
            Switch to Card View
        </button>
        <button id="toggleChartBtn_paymentsTable" class="flex items-center px-6 py-3 bg-gradient-to-r from-green-600 to-green-800 text-white font-semibold rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-green-300">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm12 0a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm-7 0a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10z"></path></svg>
            Show Chart
        </button>
    </div>

    <!-- Payments Table -->
    <table id="paymentsTable" class="display w-full text-left border-collapse rounded-lg shadow-md" style="width:100%">
        <thead class="bg-blue-100 text-blue-800">
            <tr>
                <th class="p-3 border-b-2 border-blue-200 text-sm font-semibold uppercase tracking-wider rounded-tl-lg">Payment ID</th>
                <th class="p-3 border-b-2 border-blue-200 text-sm font-semibold uppercase tracking-wider">Invoice ID</th>
                <th class="p-3 border-b-2 border-blue-200 text-sm font-semibold uppercase tracking-wider">Payment Date</th>
                <th class="p-3 border-b-2 border-blue-200 text-sm font-semibold uppercase tracking-wider">Amount</th>
                <th class="p-3 border-b-2 border-blue-200 text-sm font-semibold uppercase tracking-wider">Payment Method</th>
                <th class="p-3 border-b-2 border-blue-200 text-sm font-semibold uppercase tracking-wider">Status</th>
                <th class="p-3 border-b-2 border-blue-200 text-sm font-semibold uppercase tracking-wider rounded-tr-lg">Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- DataTables will populate this tbody -->
        </tbody>
    </table>

    <!-- Card View Container (initially hidden, populated by JS) -->
    <div id="paymentsTable-card-view" class="mt-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6" style="display: none;">
        <!-- Cards will be rendered here by JavaScript -->
    </div>

    <!-- Chart Container (initially hidden) -->
    <div id="paymentsTable-chart-container" class="mt-8" style="display: none;">
        <canvas id="paymentsTable-chart"></canvas>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const paymentsTableId = "paymentsTable";

            LoadDataTable({
                tableId: paymentsTableId,
                ajaxUrl: "/api/Payments",
                columns: [
                    { data: "paymentId", title: "Payment ID" },
                    { data: "invoiceId", title: "Invoice ID" },
                    { data: "paymentDate", title: "Payment Date", render: function (data) { return data ? new Date(data).toLocaleDateString() : ""; } },
                    { data: "amount", title: "Amount", render: $.fn.dataTable.render.number(',', '.', 2, '$') },
                    { data: "paymentMethod", title: "Payment Method" },
                    { data: "status", title: "Status" },
                    {
                        data: null,
                        title: "Actions",
                        orderable: false,
                        searchable: false,
                        render: function (data, type, row) {
                            const id = row.paymentId;
                            return `
                                <a href="/Payments/Edit/${id}" class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-yellow-700 bg-yellow-100 hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors duration-200 mr-2">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                    Edit
                                </a>
                                <a href="/Payments/Delete/${id}" class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200" onclick="return confirm('Are you sure you want to delete this payment?');">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                    Delete
                                </a>
                            `;
                        }
                    }
                ],
                pageLength: 10,
                initialIsCardView: false,
                initialIsChartView: false,
                cardViewRender: function (data) {
                    return `
                        <div class="data-card bg-white rounded-xl shadow-lg p-6 border border-gray-200 hover:shadow-xl transition-shadow duration-300">
                            <h3 class="text-xl font-bold text-blue-700 mb-2">Payment #${data.paymentId}</h3>
                            <div class="card-item"><strong>Invoice ID:</strong> <span>${data.invoiceId}</span></div>
                            <div class="card-item"><strong>Date:</strong> <span>${data.paymentDate ? new Date(data.paymentDate).toLocaleDateString() : 'N/A'}</span></div>
                            <div class="card-item"><strong>Amount:</strong> <span>${$.fn.dataTable.render.number(',', '.', 2, '$').display(data.amount)}</span></div>
                            <div class="card-item"><strong>Method:</strong> <span>${data.paymentMethod || 'N/A'}</span></div>
                            <div class="card-item"><strong>Status:</strong> <span>${data.status || 'N/A'}</span></div>
                            <div class="card-actions mt-4">
                                <a href="/Payments/Edit/${data.paymentId}" class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-yellow-700 bg-yellow-100 hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transition-colors duration-200 mr-2">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg> Edit
                                </a>
                                <a href="/Payments/Delete/${data.paymentId}" class="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200" onclick="return confirm('Are you sure you want to delete this payment?');">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg> Delete
                                </a>
                            </div>
                        </div>
                    `;
                },
                chartConfig: {
                    type: 'bar',
                    processData: function (apiData, columns) {
                        // Group payments by status and sum amounts
                        const statusGroups = {};
                        apiData.forEach(item => {
                            const status = item.status || 'Unknown';
                            statusGroups[status] = (statusGroups[status] || 0) + (item.amount || 0);
                        });
                        const labels = Object.keys(statusGroups);
                        const dataValues = labels.map(label => statusGroups[label]);
                        return {
                            labels: labels,
                            datasets: [{
                                label: 'Total Payment Amount by Status',
                                data: dataValues,
                                backgroundColor: [
                                    'rgba(54, 162, 235, 0.6)',
                                    'rgba(255, 99, 132, 0.6)',
                                    'rgba(255, 206, 86, 0.6)',
                                    'rgba(75, 192, 192, 0.6)',
                                    'rgba(153, 102, 255, 0.6)'
                                ],
                                borderColor: [
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 99, 132, 1)',
                                    'rgba(255, 206, 86, 1)',
                                    'rgba(75, 192, 192, 1)',
                                    'rgba(153, 102, 255, 1)'
                                ],
                                borderWidth: 1
                            }]
                        };
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Payments by Status',
                                font: { size: 20, family: 'Inter, sans-serif', weight: 'bold' },
                                color: '#333'
                            },
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                                        }
                                        return label;
                                    }
                                }
                            }
                        },
                        animation: {
                            duration: 1000,
                            easing: 'easeOutQuart'
                        },
                        font: {
                            family: 'Inter, sans-serif'
                        },
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Status',
                                    font: { size: 14, family: 'Inter, sans-serif' }
                                },
                                grid: { display: false },
                                ticks: { font: { family: 'Inter, sans-serif' } }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Total Payment Amount ($)',
                                    font: { size: 14, family: 'Inter, sans-serif' }
                                },
                                grid: { color: 'rgba(200, 200, 200, 0.2)' }
                            }
                        }
                    }
                }
            });

            // Table/Card toggle button
            $(`#toggleViewBtn_${paymentsTableId}`).on('click', function () {
                toggleTableView(paymentsTableId);
                const $btn = $(this);
                const instanceState = dataTableManager[paymentsTableId];
                if (instanceState.isCardView) {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>Switch to Table View');
                } else {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path></svg>Switch to Card View');
                }
            });

            // Chart toggle button
            $(`#toggleChartBtn_${paymentsTableId}`).on('click', function () {
                toggleChartView(paymentsTableId);
                const $btn = $(this);
                const instanceState = dataTableManager[paymentsTableId];
                if (instanceState.isChartView) {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm12 0V7m0 10a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10zm-6 0V7m0 10a2 2 0 01-2 2h-2a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2v10z"></path></svg>Show Table/Card');
                } else {
                    $btn.html('<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3m0 0l3 3m-3-3v8m0-13a9 9 0 110 18 9 9 0 010-18z"></path></svg>Show Chart');
                }
            });
        });
    </script>
}
